import static org.junit.Assert.*;
import org.junit.Test;

public class AddFunctionTest {

    // 1. Basic Functionality
    @Test
    public void testAddBasicFunctionality() {
        assertEquals(5, add(2, 3));
    }

    // 2. Negative Numbers
    @Test
    public void testAddNegativeNumbers() {
        assertEquals(-5, add(-2, -3));
    }

    // 3. Zero
    @Test
    public void testAddZero() {
        assertEquals(0, add(0, 0));
    }

    // 4. Large Numbers
    @Test
    public void testAddLargeNumbers() {
        assertEquals(2000000, add(1000000, 1000000));
    }

    // 5. Mixed Sign Numbers
    @Test
    public void testAddMixedSignNumbers() {
        assertEquals(1, add(-2, 3));
    }

    // 6. Floating Point Numbers
    @Test
    public void testAddFloatingPointNumbers() {
        assertEquals(6.0, add(2.5, 3.5), 0.001);
    }

    // 7. Invalid Input
    @Test(expected = IllegalArgumentException.class)
    public void testAddInvalidInput() {
        add("two", 3);
    }

    // 8. Boundary Conditions
    @Test
    public void testAddBoundaryConditions() {
        int maxInt = Integer.MAX_VALUE;
        assertTrue(add(maxInt, 1) < 0); // Integer overflow behavior
    }

    // 9. Edge Case Handling (Very Small Values)
    @Test
    public void testAddEdgeCaseHandling() {
        assertEquals(2e-10, add(1e-10, 1e-10), 1e-12);
    }

    // 10. Null Input
    @Test(expected = NullPointerException.class)
    public void testAddNullInput() {
        add(null, 5);
    }

    // 11. Commutativity
    @Test
    public void testAddCommutativity() {
        assertEquals(add(3, 2), add(2, 3));
    }

    // 12. Associativity
    @Test
    public void testAddAssociativity() {
        assertEquals(add(add(1, 2), 3), add(1, add(2, 3)));
    }

    // 13. Precision Handling
    @Test
    public void testAddPrecisionHandling() {
        assertEquals(1e10, add(1e10, 1e-10), 0.001);
    }

    // 14. Negative Zero Handling
    @Test
    public void testAddNegativeZeroHandling() {
        assertEquals(0.0, add(-0.0, 0.0), 0.001);
    }

    // 15. Addition of Opposites
    @Test
    public void testAddAdditionOfOpposites() {
        assertEquals(0, add(5, -5));
    }

    // Sample add function for testing
    private int add(int a, int b) {
        return a + b;
    }

    private double add(double a, double b) {
        return a + b;
    }

    private int add(Object a, int b) {
        if (a == null) {
            throw new NullPointerException();
        }
        if (!(a instanceof Integer)) {
            throw new IllegalArgumentException("Invalid argument type");
        }
        return (Integer) a + b;
    }
}
