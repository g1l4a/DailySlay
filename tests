// 1 - Basic Calculations
routine testBasicCalculations() is
    var positive : integer is add(2, 3);
    var negative : integer is add(-2, -3);
    var zero: integer is add(0, 0);
    var different_sign: integer is add(3, -4);
    if result = 5 and negative = -5 and zero = 0 and different_sign = -1 then
        // Test passed
    else
        // Test failed
    end
end

// 2 - Large Numbers
routine testAddLargeNumbers() is
    var result : integer is add(1000000, 1000000);
    if result = 2000000 then
        // Test passed
    else
        // Test failed
    end
end

// 3 - Floating Point Numbers
routine testAddFloatingPointNumbers() is
    var result : real is add(2.5, 3.5);
    if result = 6.0 then
        // Test passed
    else
        // Test failed
    end
end

// 4 - Invalid Input
routine testAddInvalidInput() is
    if /* add("two", 3) raises error */ then
        // Test passed
    else
        // Test failed
    end
end

// 5 - Boundary Conditions
routine testAddBoundaryConditions() is
    var maxInt : integer is /* maximum integer value */;
    var result : integer is add(maxInt, 1);
    if /* result indicates overflow behavior */ then
        // Test passed
    else
        // Test failed
    end
end

// 6 - Null Input: Test how the function behaves with null inputs, if applicable
routine testAddNullInput() is
    if /* add(null, 5) raises error */ then
        // Test passed
    else
        // Test failed
    end
end

// 7 - Commutativity: Test that add(3, 2) returns the same result as add(2, 3)
routine testAddCommutativity() is
    var result1 : integer is add(3, 2);
    var result2 : integer is add(2, 3);
    if result1 = result2 then
        // Test passed
    else
        // Test failed
    end
end

// 8 - Associativity: Test that add(add(1, 2), 3) returns the same result as add(1, add(2, 3))
routine testAddAssociativity() is
    var result1 : integer is add(add(1, 2), 3);
    var result2 : integer is add(1, add(2, 3));
    if result1 = result2 then
        // Test passed
    else
        // Test failed
    end
end

// 9 - Array Initialization and Access
routine testArrayInitializationAndAccess() is
    var arr : array [3] integer is [1, 2, 3];
    if arr[1] = 1 and arr[2] = 2 and arr[3] = 3 then
        // Test passed
    else
        // Test failed
    end
end

// 10 - Array Out of Bounds Access
routine testArrayOutOfBoundsAccess() is
    var arr : array [2] integer is [1, 2];
    var exceptionCaught : boolean is false;
    try
        var outOfBoundsElement : integer is arr[3];
    catch
        exceptionCaught is true;
    end

    if exceptionCaught then
        // Test passed
    else
        // Test failed
    end
end

// 11 - User-Defined Type (Record)
routine testUserDefinedRecordType() is
    type Person is record
        var name : string;
        var age : integer;
    end

    var p : Person is (name: "Alice", age: 30);
    
    if p.name = "Alice" and p.age = 30 then
        // Test passed
    else
        // Test failed
    end
end

// 12 - User-Defined Type (Nested Record)
routine testNestedUserDefinedRecordType() is
    type Address is record
        var street : string;
        var city : string;
    end
    
    type Person is record
        var name : string;
        var age : integer;
        var address : Address;
    end

    var p : Person is (name: "Bob", age: 40, address: (street: "Main St", city: "Townsville"));
    
    if p.name = "Bob" and p.address.street = "Main St" and p.address.city = "Townsville" then
        // Test passed
    else
        // Test failed
    end
end

// 13 - Subroutine Returning a Value
routine testSubroutineReturningValue() is
    routine multiply(x: real, y: real) : real is
        return x * y;
    end

    var result : real is multiply(3.0, 4.0);
    if result = 12.0 then
        // Test passed
    else
        // Test failed
    end
end

// 14 - Nested Loops
routine testNestedLoops() is
    var sum : integer is 0;
    for i in 1..3 loop
        for j in 1..2 loop
            sum := sum + 1;
        end
    end

    if sum = 6 then
        // Test passed
    else
        // Test failed
    end
end

// 15 - Break Statement in Loop
routine testBreakStatementInLoop() is
    var sum : integer is 0;
    for i in 1..5 loop
        if i = 3 then
            break;
        end
        sum := sum + i;
    end

    if sum = 3 then  // 1 + 2 = 3, loop breaks at i = 3
        // Test passed
    else
        // Test failed
    end
end

// 16 - Array Assignment and Reference Type Behavior
routine testArrayAssignmentAndReference() is
    var arr1 : array [3] integer is [1, 2, 3];
    var arr2 : array [3] integer is arr1;
    arr2[1] := 10;

    if arr1[1] = 10 then  // Reference type, change reflects in arr1
        // Test passed
    else
        // Test failed
    end
end

// 17 - Loop with Array Modification
routine testLoopWithArrayModification() is
    var arr : array [5] integer is [1, 2, 3, 4, 5];
    
    for i in 1..5 loop
        arr[i] := arr[i] * 2;
    end
    
    if arr[1] = 2 and arr[5] = 10 then
        // Test passed
    else
        // Test failed
    end
end

// 18 - Subroutine with Array Parameter
routine testSubroutineWithArrayParameter() is
    routine sumArray(arr: array [3] integer) : integer is
        var sum : integer is 0;
        for i in 1..3 loop
            sum := sum + arr[i];
        end
        return sum;
    end

    var arr : array [3] integer is [4, 5, 6];
    var result : integer is sumArray(arr);
    
    if result = 15 then  // 4 + 5 + 6 = 15
        // Test passed
    else
        // Test failed
    end
end

// 19 - Routine with Record Parameter
routine testRoutineWithRecordParameter(address: record Address) is
    type Address is record
        var street : string;
        var city : string;
    end

    routine printAddress(addr: Address) is
            // Assuming there is some way to output or verify the printed address.
            // For the sake of this test, let's assume we return the address as a string.
            return addr.street & ", " & addr.city;
        end

        var testAddress : Address is (street: "Baker St", city: "London");
        var result : string is printAddress(testAddress);
        
        if result = "Baker St, London" then
            // Test passed
        else
            // Test failed
        end
    end


// 20 - Routine Returning a Record
routine testRoutineReturningRecord() is
    type Address is record
        var street : string;
        var city : string;
    end

    routine createAddress(street: string, city: string) : Address is
        var addr : Address is (street: street, city: city);
        return addr;
    end

    var testAddress : Address is createAddress("Elm St", "Springfield");
    
    if testAddress.street = "Elm St" and testAddress.city = "Springfield" then
        // Test passed
    else
        // Test failed
    end
end

// 21 - String Initialization and Access
routine testStringInitializationAndAccess() is
    var str : array [5] char is ['H', 'e', 'l', 'l', 'o'];
    if str[1] = 'H' and str[5] = 'o' then
        // Test passed
    else
        // Test failed
    end
end

// 22 - String Concatenation
routine testStringConcatenation() is
    routine concat(a: array [3] char, b: array [2] char) : array [5] char 
is
        var result : array [5] char;
        result[1] := a[1];
        result[2] := a[2];
        result[3] := a[3];
        result[4] := b[1];
        result[5] := b[2];
        return result;
    end

    var str1 : array [3] char is ['H', 'e', 'y'];
    var str2 : array [2] char is [' ', 'U'];
    var result : array [5] char is concat(str1, str2);
    
    if result[1] = 'H' and result[5] = 'U' then
        // Test passed
    else
        // Test failed
    end
end

// 23 - String Comparison
routine testStringComparison() is
    routine compare(a: array [5] char, b: array [5] char) : boolean is
        return a[1] = b[1] and a[5] = b[5];
    end

    var str1 : array [5] char is ['H', 'e', 'l', 'l', 'o'];
    var str2 : array [5] char is ['H', 'e', 'l', 'l', 'o'];
    
    if compare(str1, str2) then
        // Test passed
    else
        // Test failed
    end
end

// 24 - Print Statement (Simulated)
routine testPrintStatement() is
    routine printCharArray(a: array [5] char) is
        // Simulate printing each character in the array
    end

    var str : array [5] char is ['H', 'e', 'l', 'l', 'o'];
    printCharArray(str);
    // Test passed if print simulation works
end

// 25 - Error Handling: Invalid Character Access
routine testInvalidCharacterAccess() is
    var str : array [5] char is ['H', 'e', 'l', 'l', 'o'];
    var exceptionCaught : boolean is false;

    try
        var invalidChar : char is str[6];  // Out of bounds
    catch
        exceptionCaught := true;
    end

    if exceptionCaught then
        // Test passed
    else
        // Test failed
    end
end
